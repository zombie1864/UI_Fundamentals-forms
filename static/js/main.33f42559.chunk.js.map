{"version":3,"sources":["templates/LoginTemplate.js","validators/validateForm.js","components/login/LoginForm.js","pages/LoginPage.js","templates/ToDoListTemplate.js","components/list/ToDoList.js","pages/ListPage.js","App.js","index.js"],"names":["LoginTemplate","emailInput","pwdInput","invalidEmail","invalidPwd","formSubmitted","redirect","handleSubmitForm","handleInputChange","className","onSubmit","value","onChange","placeholder","type","disabled","to","_validateEmail","email","includes","length","validEmailExt","atSymIdx","indexOf","firstStrSeg","slice","SecondStrSeg","firstdStrSegExList","split","secondStrSegExList","_scan","listA","listB","match","i","validExt","breakLoop","j","inputEx","_validatePwd","pwd","LoginForm","useState","setEmailInput","setpwdInput","setFormSubmitted","setInvalidEmail","setInvalidPwd","setRedirect","setTimeout","stagingRedirect","useEffect","event","preventDefault","loginMetaData","data","containsValidEmail","containsValidPwd","password","validateForm","target","dataset","fieldname","trim","LoginPage","ToDoListTemplate","toDoList","input","toggleNewItem","itemToEditIndex","searchTerm","addNewItem","saveNewItem","editItem","deleteItem","handleSearchRequest","cancelAddNewItem","onClick","filter","item","toLowerCase","map","idx","defaultValue","ToDoList","setToDoList","setToggleNewItem","setInput","editable","setEditable","setItemToEdit","setSearchTerm","inputDetected","setInputDetected","localStorage","getItem","JSON","parse","setItem","stringify","parseInt","key","splice","ListPage","App","path","exact","component","ReactDOM","render","basename","process","StrictMode","document","getElementById"],"mappings":"qUAuEeA,EAjEO,SAClBC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,GAcA,OACI,gCACI,oBAAIC,UAAU,OAAd,yBACA,uBAAMA,UAAU,YAAYC,SAAUH,EAAtC,UACQ,uBAAOE,UAAU,aAAjB,mBACA,gCACI,sBAAMA,UAAU,QAAhB,SAAwB,cAAC,IAAD,MACxB,uBACAE,MAAOV,EACP,iBAAe,QACfQ,UAAWN,EAAe,2BAA6B,cACvDS,SAAUJ,EACVK,YAAY,sBACZC,KAAK,SACJX,GAAgB,mBAAGM,UAAU,SAAb,8BAErB,uBAAOA,UAAU,aAAjB,sBACA,gCACI,sBAAMA,UAAU,QAAhB,SAAwB,cAAC,IAAD,MACxB,uBACAE,MAAOT,EACP,iBAAe,MACfO,UAAWL,EAAa,2BAA6B,cACrDQ,SAAUJ,EACVK,YAAY,gCACZC,KAAK,aACJV,GAAc,mBAAGK,UAAU,SAAb,8DAEvB,qBAAKA,UAAWJ,EAAgB,4BAA8B,oBAA9D,SACI,+BACI,uBACAI,UAAWJ,EAAgB,KAAO,WAClCS,KAAK,SACLH,MAAON,EAAgB,WAAa,QACpCU,WAAUV,WAIrBC,GAAY,cAAC,WAAD,CAAUU,GAAG,cCrDzBC,EAAiB,SAAAC,GAK1B,GAAIA,EAAMC,SAAS,KAAM,OAAO,EAChC,IAAKD,EAAMC,SAAS,KAAM,OAAO,EACjC,GAAID,EAAME,OAAS,GAAI,OAAO,EAC9B,IAAMC,EAAgB,CAAC,OAAQ,OAAQ,OAAQ,MAAO,QAClDC,EAAWJ,EAAMK,QAAQ,KACzBC,EAAcN,EAAMO,MAAM,EAAGH,GAC7BI,EAAeR,EAAMO,MAAMH,EAAW,GACtCK,EAAqBH,EAAYI,MAAM,KACvCC,EAAqBH,EAAaE,MAAM,KAC5C,MAAoB,KAAhBJ,KACIM,EAAMH,EAAoBN,IAAkBS,EAAMD,EAAoBR,KAIrES,EAAQ,SAACC,EAAOC,GAMzB,IADA,IAAIC,GAAQ,EACHC,EAAI,EAAGA,EAAIF,EAAMZ,OAAQc,IAAK,CAGnC,IAFA,IAAIC,EAAWH,EAAME,GACjBE,GAAY,EACPC,EAAI,EAAGA,EAAIN,EAAMX,OAAQiB,IAAK,CACnC,IAAIC,EAAUP,EAAMM,GAChB,WAAIC,KAAcH,IAAUC,GAAY,GACxCC,IAAMN,EAAMX,OAAS,GAAKc,IAAMF,EAAMZ,OAAS,IAAGa,GAAQ,GAElE,GAAIG,EAAW,MAEnB,OAAOH,GAIEM,EAAe,SAAAC,GAKzB,OAAQA,EAAIpB,QAAU,IAAMoB,EAAIpB,QAAU,GCsB9BqB,EA3EG,WAKd,MAAoCC,mBAAS,IAA7C,mBAAOzC,EAAP,KAAmB0C,EAAnB,OAC8BD,mBAAS,IADvC,mBACKxC,EADL,KACe0C,EADf,OAEwCF,oBAAS,GAFjD,mBAEKrC,EAFL,KAEoBwC,EAFpB,OAGsCH,qBAHtC,mBAGKvC,EAHL,KAGmB2C,EAHnB,OAIkCJ,qBAJlC,mBAIKtC,EAJL,KAIiB2C,EAJjB,OAK8BL,oBAAS,GALvC,mBAKKpC,EALL,KAKe0C,EALf,KAWI3C,GAJoB,SAAAA,GAChBA,GAAe4C,YAAW,kBAAMD,GAAY,KAAO,KAGxCE,CAAgB7C,GACnC8C,qBAAU,WACN,OAAO,kBAAMN,GAAiB,MAC/B,IA4CH,OAAO7C,EACHC,EACAC,EACAC,EACAC,EACAC,EACAC,GA/CqB,SAAA8C,GACrBA,EAAMC,iBACN,IAIIC,EDhCgB,SAACC,GAMzB,MAAO,CACHC,mBAAoBvC,EAAesC,EAAKrC,OACxCuC,iBAAkBlB,EAAagB,EAAKG,WCwBhBC,CAJP,CACTzC,MAAOjB,EACPyD,SAAUxD,IAIVoD,EAAcE,oBACdF,EAAcG,kBAGdZ,GAAiB,GACjBF,EAAc,IACdC,EAAY,IACZE,IACAC,MAEAD,GAAiBQ,EAAcE,oBAC/BT,GAAeO,EAAcG,sBAKX,SAAAL,GAItB,OAAQA,EAAMQ,OAAOC,QAAQC,WACzB,IAAK,QACDhB,GAAgB,GAChBH,EAAcS,EAAMQ,OAAOjD,MAAMoD,QACjC,MACJ,IAAK,MACDnB,EAAYQ,EAAMQ,OAAOjD,OACzBoC,GAAc,QC/CfiB,G,MAXG,WAId,OACI,qBAAKvD,UAAU,qBAAf,SACI,cAAC,EAAD,Q,eCoGGwD,G,MA3GU,SACrBC,EACAC,EACAC,EACAC,EACAC,EACAC,EACA/D,EACAgE,EACAC,EACAC,EACAC,EACAC,GAEA,OAgBI,cAfA,CAeA,OAAKnE,UAAU,oBAAf,UACA,sBAAKA,UAAU,kBAAf,UACI,uBACAK,KAAK,OACLL,UAAU,cACVG,SAAU+D,EACV9D,YAAY,cACZ,wBACAJ,UAAU,aACVoE,QAASN,EAFT,SAGI,sBAAM9D,UAAU,aAAhB,sBAIJ2D,GACA,sBAAK3D,UAAU,mBAAf,UACI,uBACAA,UAAU,eACVE,MAAOwD,EACPrD,KAAK,OACLF,SAAUJ,EACVK,YAAY,iBACZ,wBAAQJ,UAAU,cAAcoE,QAASL,EAAzC,kBACA,wBAAQ/D,UAAU,gBAAgBoE,QAASD,EAA3C,uBAGR,6BAEQV,EAASY,QAAO,SAAAC,GACZ,MAAmB,KAAfT,GAGAS,EAAKC,cAAc7D,SAASmD,EAAWU,eAFhCD,EAMJ,QACRE,KAAI,SAACF,EAAMG,GACd,OACI,sBAAezE,UAAU,gBAAzB,UACA,oBAAIA,UAAU,SAAd,SACM4D,IAAoBa,EAClB,uBACApE,KAAK,OACLL,UAAU,OACV0E,aAAcJ,EACdnE,SAAUJ,IAEV,qBAAKC,UAAU,yBAAf,SACI,sBAAMA,UAAU,gBAAhB,SAAiCsE,QAKzCV,IAAoBa,EACpB,wBAAQzE,UAAU,cAAcoE,QAASL,EAAzC,kBACA,sBAAK/D,UAAU,kBAAf,UACI,wBACAA,UAAU,UACV,WAAUyE,EACVL,QAASJ,IAET,wBACAhE,UAAU,YACV,WAAUyE,EACVL,QAASH,SA1BPQ,aCWfE,EA/EE,WAKd,MAAgC1C,mBAAS,IAAzC,mBAAOwB,EAAP,KAAiBmB,EAAjB,OACyC3C,oBAAS,GADlD,mBACM0B,EADN,KACqBkB,EADrB,OAEyB5C,mBAAS,IAFlC,mBAEMyB,EAFN,KAEaoB,EAFb,OAG+B7C,oBAAS,GAHxC,mBAGM8C,EAHN,KAGgBC,EAHhB,OAIwC/C,qBAJxC,mBAIM2B,EAJN,KAIuBqB,EAJvB,OAKmChD,mBAAS,IAL5C,mBAKM4B,EALN,KAKkBqB,EALlB,OAMyCjD,oBAAS,GANlD,mBAMMkD,EANN,KAMqBC,EANrB,KAQC1C,qBAAU,WACN,IAAMI,EAAOuC,aAAaC,QAAQ,UAC9BxC,GAAM8B,EAAYW,KAAKC,MAAM1C,MAC/B,IAGNJ,qBAAU,kBAAM2C,aAAaI,QAAQ,SAAUF,KAAKG,UAAUjC,OA4C9D,OAAOD,EACHC,EACAC,EACAC,EACAC,EACAC,GA/Ce,WACXkB,GACJF,GAAiB,MAEK,SAAAlC,GACtByC,GAAiB,GACjBN,EAASnC,EAAMQ,OAAOjD,UAQN,WACZwD,EAAM/C,QAAU,KAAO+C,EAAM/C,QAAU,IAAMoE,GAC7CH,EAAY,GAAD,mBAAKnB,GAAL,CAAcC,KAEzBqB,GAAYI,IACZH,GAAY,GACZJ,EAAYnB,EAASe,KAAI,SAACF,EAAMG,GAE5B,OADIA,IAAQb,IAAiBU,EAAOZ,GAC7BY,OAGfO,GAAiB,GACjBC,EAAS,IACTG,IACAD,GAAY,GACZI,GAAiB,MAGJ,SAAAzC,GACbsC,EAAcU,SAAShD,EAAMQ,OAAOC,QAAQwC,MAC5CZ,GAAY,MAGG,SAAArC,GACfc,EAASoC,OAAOF,SAAShD,EAAMQ,OAAOC,QAAQwC,KAAM,GACpDhB,EAAY,YAAInB,OA/BQ,SAAAd,GAAK,OAAIuC,EAAcvC,EAAMQ,OAAOjD,UACvC,WACrB2E,GAAiB,GACjBC,EAAS,QCfFgB,G,MAhBE,WACb,OACI,gCACI,oBAAI9F,UAAU,YAAd,wBACA,cAAC,EAAD,IACI,qBAAKA,UAAU,oBAAf,SACI,sBAAMA,UAAU,aAAhB,SACI,cAAC,IAAD,CAAMO,GAAG,IAAT,SACI,wBAAQP,UAAU,YAAlB,+B,MCSb+F,MAhBf,WAIE,OACE,qBAAK/F,UAAU,MAAf,SACE,cAAC,IAAD,UACE,eAAC,SAAD,WACE,cAAC,QAAD,CAAOgG,KAAK,IAAIC,OAAK,EAACC,UAAW3C,IACjC,cAAC,QAAD,CAAOyC,KAAK,QAAQE,UAAWJ,Y,iBCRzCK,IAASC,OACP,cAAC,IAAD,CAAeC,SAAUC,yBAAzB,SACE,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,QAGJC,SAASC,eAAe,W","file":"static/js/main.33f42559.chunk.js","sourcesContent":["import { Redirect } from 'react-router-dom'\nimport {BiUserCircle} from 'react-icons/bi'\nimport {MdOutlineLock} from 'react-icons/md'\nimport '../css/LoginForm.css'\n\n\nconst LoginTemplate = (\n    emailInput,\n    pwdInput,\n    invalidEmail,\n    invalidPwd,\n    formSubmitted,\n    redirect,\n    handleSubmitForm, \n    handleInputChange\n) => {\n    /**\n    @description: view function, deals with the render markup of login page\n    @param {emailInput - state} String: Input from user\n    @param {pwdInput- state} String: Input from user\n    @param {invalidEmail- state} Boolean: Used for dynamic styling and rendering of errMsg\n    @param {invalidPwd- state} Boolean: Used for dynamic styling and rendering of errMsg\n    @param {formSubmitted- state} Boolean: Used for dynamic styling and render msg to user on successful form \n    @param {redirect- state} Boolean: true => redirect to list page \n    @param {handleSubmitForm - event handler} cbFunc: handles validation of form upon submission \n    @param {handleInputChange - event handler} cbFunc: Used for controlled comp of form \n    **/\n\n    return (\n        <div>\n            <h1 className='logo'>Task Master</h1>\n            <form className='loginForm' onSubmit={handleSubmitForm}>\n                    <label className='formLabels'>Email</label>\n                    <div>\n                        <span className='icons'><BiUserCircle/></span>\n                        <input \n                        value={emailInput}\n                        data-fieldname='email'\n                        className={invalidEmail ? 'inputFields invalidInput' : 'inputFields'}\n                        onChange={handleInputChange}\n                        placeholder='user@rapptrlabs.com'\n                        type='text'/>\n                        {invalidEmail && <p className='errMsg'>Invalid Email</p>}\n                    </div>\n                    <label className='formLabels'>Password</label>\n                    <div>\n                        <span className='icons'><MdOutlineLock/></span>\n                        <input \n                        value={pwdInput}\n                        data-fieldname='pwd'\n                        className={invalidPwd ? 'inputFields invalidInput' : 'inputFields'}\n                        onChange={handleInputChange}\n                        placeholder='Must be at least 4 characters'\n                        type='password'/>\n                        {invalidPwd && <p className='errMsg'>Password must be between 4-16 characters long</p>}\n                    </div>\n                <div className={formSubmitted ? 'loginBtnContainer_success' : 'loginBtnContainer' }>\n                    <span>\n                        <input \n                        className={formSubmitted ? null : 'loginBtn'} \n                        type=\"submit\" \n                        value={formSubmitted ? 'Success!' : 'Login'}\n                        disabled={formSubmitted ? true : false}/>\n                    </span>\n                </div>\n            </form>\n            {redirect && <Redirect to='/list'/>}\n        </div>\n    )\n} \n\nexport default LoginTemplate","export const validateForm = (data) => {\n    /**\n    @description: validates data from login form \n    @param {data} Object: contains input data from user\n    @returns {Object} Object: true/false\n    **/\n    return {\n        containsValidEmail: _validateEmail(data.email), \n        containsValidPwd: _validatePwd(data.password)\n    }\n}\n\n\nexport const _validateEmail = email => {\n    /**\n    @description: aux function \n    @param {email} String: \n    **/\n    if (email.includes(' ')) return false \n    if (!email.includes('@')) return false \n    if (email.length > 50) return false \n    const validEmailExt = ['.com', '.edu', '.net', '.io', '.gov']\n    let atSymIdx = email.indexOf('@'),\n        firstStrSeg = email.slice(0, atSymIdx), \n        SecondStrSeg = email.slice(atSymIdx + 1), \n        firstdStrSegExList = firstStrSeg.split('.'), \n        secondStrSegExList = SecondStrSeg.split('.') \n    if (firstStrSeg === '') return false\n    return !_scan(firstdStrSegExList, validEmailExt) && _scan(secondStrSegExList, validEmailExt) \n}\n\n\nexport const _scan = (listA, listB) => {\n    /**\n    @description: aux func that checks for common el in listA and listB. Match results in true, no match results in false \n    @param {} \n    **/\n    let match = true \n    for (let i = 0; i < listB.length; i++) {\n        let validExt = listB[i], \n            breakLoop = false \n        for (let j = 0; j < listA.length; j++) {\n            let inputEx = listA[j]\n            if (`.${inputEx}` === validExt) breakLoop = true \n            if (j === listA.length - 1 && i === listB.length - 1) match = false \n        }\n        if (breakLoop) break \n    }\n    return match \n}\n\n\nexport const _validatePwd = pwd => {\n    /**\n    @description: aux function\n    @param {pwd} String \n    **/\n   return  pwd.length <= 16 && pwd.length >= 4\n}\n","import LoginTemplate from '../../templates/LoginTemplate'\nimport { validateForm } from '../../validators/validateForm.js'\nimport { useState, useEffect } from 'react'\n\nconst LoginForm = () => {\n    /**\n    @description: login form comp. Contains all the business logic of loginForm \n    @param {} Null: no props  \n    **/\n    const [emailInput, setEmailInput] = useState(''),\n        [pwdInput, setpwdInput] = useState(''),\n        [formSubmitted, setFormSubmitted] = useState(false),\n        [invalidEmail, setInvalidEmail] = useState(),\n        [invalidPwd, setInvalidPwd] = useState(),\n        [redirect, setRedirect] = useState(false)\n\n    const stagingRedirect = formSubmitted => {\n        if (formSubmitted) setTimeout(() => setRedirect(true), 1000);\n    }\n\n    if (formSubmitted) stagingRedirect(formSubmitted)\n    useEffect(() => { // performs cleanup of states on componentUnmount phase \n        return () => setFormSubmitted(false)\n    }, [])\n\n\n    const handleSubmitForm = event => {\n        event.preventDefault()\n        const data = {\n            email: emailInput, \n            password: pwdInput\n        }\n        let loginMetaData = validateForm(data)\n        if (\n            loginMetaData.containsValidEmail && \n            loginMetaData.containsValidPwd \n        ) {\n            // POSTdata(data)\n            setFormSubmitted(true)\n            setEmailInput('')\n            setpwdInput('')\n            setInvalidEmail()\n            setInvalidPwd()\n        } else {\n            setInvalidEmail(!loginMetaData.containsValidEmail)\n            setInvalidPwd(!loginMetaData.containsValidPwd)\n        }\n    }\n\n\n    const handleInputChange = event => {\n        /**\n        @description: event.target.value.trim() is a DSGN choice which effectively disables user from entering whitespaces to email field. This enforces clean input data from user on a UI lvl that permits the propagation of clean data\n        **/\n        switch (event.target.dataset.fieldname) {\n            case 'email':\n                setInvalidEmail(false)\n                setEmailInput(event.target.value.trim()) \n                break \n            case 'pwd':\n                setpwdInput(event.target.value)\n                setInvalidPwd(false)\n                break\n            default:\n        }\n    }\n\n    return LoginTemplate(\n        emailInput,\n        pwdInput,\n        invalidEmail,\n        invalidPwd,\n        formSubmitted,\n        redirect,\n        handleSubmitForm, \n        handleInputChange\n    )\n}\n\nexport default LoginForm\n","import LoginForm from \"../components/login/LoginForm\"\nimport '../css/LoginPage.css'\n\nconst LoginPage = () => {\n    /**\n    @description: container, containing all components that will render on LoginPage\n    **/\n    return (\n        <div className='loginPageContainer'>\n            <LoginForm/>\n        </div>\n    )\n}\n\nexport default LoginPage","import '../css/ToDoList.css'\n\nconst ToDoListTemplate = (\n    toDoList,\n    input,\n    toggleNewItem,\n    itemToEditIndex,\n    searchTerm,\n    addNewItem,\n    handleInputChange,\n    saveNewItem,\n    editItem,\n    deleteItem,\n    handleSearchRequest,\n    cancelAddNewItem\n) => {\n    return (\n        /**\n        @description: view function, renders to do list \n        @param {toDoList - state} Array: contains state of to do items, list of strings \n        @param {input - state} String: input from user \n        @param {toggleNewItem - state} Boolean: flag/switch to toggle between new item state \n        @param {itemToEditIndex - state} String: the idx of item in toDoList \n        @param {searchTerm - state} String: search term input from user \n        @param {addNewItem - event handler} cdFunc: deals with adding new items to toDoList state \n        @param {handleInputChange - event handler} cdFunc: handles input changes \n        @param {saveNewItem - event handler} cdFunc: deals with saving new item to toDoList state \n        @param {editItem - event handler} cdFunc: deals with editing item from toDoList state \n        @param {deleteItem - event handler} cdFunc: deals with deleteing item form toDoList state \n        @param {handleSearchRequest - event handler} cdFunc: deals with handling search term \n        @param {cancelAddNewItem - event handler} cdFunc: cancels the attempt to add new item \n        **/\n        <div className='toDoListContainer'>\n        <div className='toDoListTopMenu'>\n            <input \n            type='text'\n            className='searchInput' \n            onChange={handleSearchRequest}\n            placeholder='Search...'/>\n            <button \n            className='newItemBtn'\n            onClick={addNewItem}>\n                <span className='newItemtxt'>New</span>\n            </button>\n        </div>\n        {\n            toggleNewItem && \n            <div className='addItemContainer'>\n                <input \n                className='addItemInput'\n                value={input}\n                type='text'\n                onChange={handleInputChange}\n                placeholder='Add New Task'/>\n                <button className='saveItemBtn' onClick={saveNewItem}>Save</button>\n                <button className='cancelItemBtn' onClick={cancelAddNewItem}>Cancel</button>\n            </div>\n        }\n        <ul>\n            {\n                toDoList.filter(item => {\n                    if (searchTerm === ''){\n                        return item \n                    } else if (\n                        item.toLowerCase().includes(searchTerm.toLowerCase())\n                    ) {\n                        return item \n                    }\n                    return null\n                }).map((item, idx) => {\n                return (\n                    <div key={idx} className='itemContainer'>\n                    <li className='liItem'>\n                        { itemToEditIndex === idx ? \n                            <input\n                            type=\"text\"\n                            className='item'\n                            defaultValue={item} // prevents clearing input for when user edits input field \n                            onChange={handleInputChange}\n                            /> : \n                            <div className='itemDisplayedContainer'>\n                                <span className='itemDisplayed'>{item}</span>\n                            </div>\n                        }\n                    </li>\n                    {\n                        itemToEditIndex === idx ? \n                        <button className='saveEditBtn' onClick={saveNewItem}>Save</button> :\n                        <div className='liBtnsContainer'>\n                            <button \n                            className='editBtn'\n                            data-key={idx} \n                            onClick={editItem}>\n                            </button>\n                            <button \n                            className='deleteBtn'\n                            data-key={idx} \n                            onClick={deleteItem}>\n                            </button>\n                        </div>\n                    }\n                    </div>\n                )\n            })}\n        </ul>\n        </div>\n    )\n}\n\nexport default ToDoListTemplate","import { useState, useEffect } from 'react'\nimport ToDoListTemplate from '../../templates/ToDoListTemplate'\n\nconst ToDoList = () => {\n    /**\n    @description: \n    @param {} \n    **/\n   const [toDoList, setToDoList] = useState([]), \n        [toggleNewItem, setToggleNewItem] = useState(false),\n        [input, setInput] = useState(''),\n        [editable, setEditable] = useState(false),\n        [itemToEditIndex, setItemToEdit] = useState(),\n        [searchTerm, setSearchTerm] = useState(''),\n        [inputDetected, setInputDetected] = useState(false)\n\n    useEffect(() => {\n        const data = localStorage.getItem(\"myList\")\n        if (data) setToDoList(JSON.parse(data))\n        },[]\n    )\n\n    useEffect(() => localStorage.setItem('myList', JSON.stringify(toDoList)))\n        \n    const addNewItem = () => { \n        if (editable) return \n        setToggleNewItem(true)\n    } \n    const handleInputChange = event => { \n        setInputDetected(true)\n        setInput(event.target.value)\n     }\n    const handleSearchRequest = event => setSearchTerm(event.target.value)\n    const cancelAddNewItem = () => {\n        setToggleNewItem(false)\n        setInput('')\n    }\n\n    const saveNewItem = () => {\n        if (input.length <= 250 && input.length >= 1 && !editable) {\n            setToDoList([...toDoList,input])\n        }\n        if (editable && inputDetected) {\n            setEditable(false)\n            setToDoList(toDoList.map((item, idx) => {\n                if (idx === itemToEditIndex) item = input\n                return item\n            }))\n        }\n        setToggleNewItem(false)\n        setInput('')\n        setItemToEdit()\n        setEditable(false)\n        setInputDetected(false)\n    } \n    \n    const editItem = event => {\n        setItemToEdit(parseInt(event.target.dataset.key))\n        setEditable(true)\n    }\n\n    const deleteItem = event => {\n        toDoList.splice(parseInt(event.target.dataset.key), 1)\n        setToDoList([...toDoList])\n    }\n\n    return ToDoListTemplate(\n        toDoList,\n        input,\n        toggleNewItem,\n        itemToEditIndex,\n        searchTerm,\n        addNewItem,\n        handleInputChange,\n        saveNewItem,\n        editItem,\n        deleteItem,\n        handleSearchRequest,\n        cancelAddNewItem\n    )\n}\n\nexport default ToDoList\n","import { Link } from 'react-router-dom'\nimport ToDoList from '../components/list/ToDoList'\nimport '../css/ListPage.css'\n\nconst ListPage = () => {\n    return (\n        <div>\n            <h1 className='taskTitle'>Task Index</h1>\n            <ToDoList/>\n                <div className=\"loginBtnContainer\">\n                    <span className=\"logoutSpan\">\n                        <Link to='/'>\n                            <button className=\"logoutBtn\">Logout</button>\n                        </Link>\n                    </span>\n                </div>\n        </div>\n    )\n}\n\nexport default ListPage\n","import LoginPage from \"./pages/LoginPage\";\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom'\nimport ListPage from \"./pages/ListPage\";\nimport './css/App.css'\n\nfunction App() {\n  /**\n  @description: Contains the application logic of the app. Using react-router-dom, a 3rd party library, user can switch between pages.\n  **/\n  return (\n    <div className='App'>\n      <Router>\n        <Switch> \n          <Route path='/' exact component={LoginPage}/>\n          <Route path='/list' component={ListPage}/>\n        </Switch>\n      </Router>\n    </div>\n  )\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport BrowserRouter from 'react-router-dom/BrowserRouter'\n\n\nReactDOM.render(\n  <BrowserRouter basename={process.env.PUBLIC_URL}>\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>\n  </BrowserRouter>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}